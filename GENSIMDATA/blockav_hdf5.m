%% PTA data preprocessing for SHAPES ("Block Averaging")
%Preprocessing of PTA data prior to running SHAPES for trend estimation.
%The steps in this script are as follows. Block average: average clusters
%of observations falling within a specified short period (e.g., 1 day).
%Interpolation: interpolate the block averaged time series to a uniform
%grid in time
%Scaling: Scale the data values to make the noise standard deviation close
%to unity.
%Trend estimation: run SHAPES to estimate the trend.
%De-scale: Remove the scaling used above from the estimated trend.

% Update by Yiqian: Detrend data then save post-processed data to HDF5 format for
% further processing.

clear;
%Data generated by YQ and downloaded (Dec 2022) from RAAPTR_NANOGrav
DataDir = '/Users/qyq/Library/Mobile Documents/com~apple~CloudDocs/Research/PulsarTiming/RAAPTR_NANOGrav/NANOGrav/Data';
load([DataDir,filesep,'NANOGrav12.5yv4.mat']);
psrNum = [1,2,5,12,20,21,24,25,27,28,29,40,46]; % # of whitened pulsar
h5_filename = '/Users/qyq/Library/Mobile Documents/com~apple~CloudDocs/Research/PulsarTiming/RAAPTR_NANOGrav/NANOGrav/Data/NANOGrav12.5yv4/NANOGrav12.5yv4_detrend.hdf5';


for psr = 1:Np
    % number of pulsar which need to be detrended
    if ismember(psr, psrNum)
        %Pulsar Name
        p_name = Names{psr};

        %Duration of block in which data points will be averaged
        mrgBlck = 1/365;%year

        %Sampling period for interpolation after block averaging
        intrpSmplIntrvl = 10/365;%year

        %SHAPES parameters
        rGain = 0.01; %regulator gain
        nKnts = 5:5:30; %Knot numbers
        nRuns = 4; %PSO runs

        %----------DO NOT CHANGE BELOW-----------
        timeVec = yr{psr};
        dataVec = timingResiduals{psr};

        mrgTimeVec = -ones(size(timeVec)); %unused elements will be discarded
        mrgDataVec = -ones(size(dataVec));

        nSmpls = length(dataVec);

        counterNotAv = 1; %Counter for earliest observation not averaged
        counterAv = 0; %Counter for latest observation from averaging
        while counterNotAv <= nSmpls
            %Indices of samples belonging to the next block to be averaged
            mrgIndx = timeVec >= timeVec(counterNotAv) &   timeVec  <= timeVec(counterNotAv) + mrgBlck;
            if ~isempty(mrgIndx)
                counterAv = counterAv + 1;
                mrgDataVec(counterAv) = mean(dataVec(mrgIndx));
                mrgTimeVec(counterAv) = mean(timeVec(mrgIndx));
                %disp(diff(timeVec(mrgIndx)));
            end
            %Move past the block that was averaged: number of elements in this
            %block are the number of 1's in mrgIndx
            counterNotAv = counterNotAv + sum(mrgIndx);
        end
        mrgTimeVec((counterAv+1):end) = [];
        mrgDataVec((counterAv+1):end) = [];

        %Interpolate
        intrpTimeVec = mrgTimeVec(1):intrpSmplIntrvl:mrgTimeVec(end);
        intrpData = interp1(mrgTimeVec, mrgDataVec, intrpTimeVec);

        %Scale
        intrpDataScl = intrpData*1e7;

        %Trend estimation
        [outStrct,bestModelOutStrct] = shps(struct('dataX',intrpTimeVec,'dataY',intrpDataScl,'nBrks',nKnts,'rGain',0.01),...
            struct('nRuns',nRuns,'psoParams',[]));

        %De-scale
        trndEst = bestModelOutStrct.bestModelSig/1e7;


        %Evaluate at original time values
        intrpTrndEst = interp1(intrpTimeVec,trndEst,timeVec);

        %Residual after subtracting out the trend estimate
        resOfres = dataVec - intrpTrndEst;

        % remove NaN
        notNAN = ~isnan(resOfres);
        resOfres = resOfres(notNAN);
        N(psr) = length(resOfres);
        sd{psr} = sd{psr}(notNAN);
        yr{psr} = yr{psr}(notNAN);
        detrend_data = struct('Names',Names, 'alphaP', alphaP, 'deltaP', deltaP, ...
            'distP', distP, 'Np', Np, 'timingResiduals', resOfres,...
            'sd', sd, 'yr', yr);
        save([DataDir,filesep,p_name,'_detrend.mat'],'resOfres',"detrend_data");

        % Save detrended data into hdf5
        grpname = Names{psr};
        h5create(h5_filename,['/',grpname,filesep,'alphaP'],1);
        h5write(h5_filename,['/',grpname,filesep,'alphaP'], alphaP(psr));
        h5create(h5_filename,['/',grpname,filesep,'deltaP'],1);
        h5write(h5_filename,['/',grpname,filesep,'deltaP'], deltaP(psr));
        h5create(h5_filename,['/',grpname,filesep,'N'],1);
        h5write(h5_filename,['/',grpname,filesep,'N'], N(psr));
        h5create(h5_filename,['/',grpname,filesep,'timingResiduals'],length(resOfres));
        h5write(h5_filename,['/',grpname,filesep,'timingResiduals'], resOfres);
        h5create(h5_filename,['/',grpname,filesep,'sd'],length(sd{psr}));
        h5write(h5_filename,['/',grpname,filesep,'sd'], sd{psr});
        h5create(h5_filename,['/',grpname,filesep,'yr'],length(yr{psr}));
        h5write(h5_filename,['/',grpname,filesep,'yr'], yr{psr});

    else
        % Save original data into HDF5 format
        grpname = Names{psr};
        h5create(h5_filename,['/',grpname,filesep,'alphaP'],1);
        h5write(h5_filename,['/',grpname,filesep,'alphaP'], alphaP(psr));
        h5create(h5_filename,['/',grpname,filesep,'deltaP'],1);
        h5write(h5_filename,['/',grpname,filesep,'deltaP'], deltaP(psr));
        h5create(h5_filename,['/',grpname,filesep,'N'],1);
        h5write(h5_filename,['/',grpname,filesep,'N'], N(psr));
        h5create(h5_filename,['/',grpname,filesep,'timingResiduals'],length(timingResiduals{psr}));
        h5write(h5_filename,['/',grpname,filesep,'timingResiduals'], timingResiduals{psr});
        h5create(h5_filename,['/',grpname,filesep,'sd'],length(sd{psr}));
        h5write(h5_filename,['/',grpname,filesep,'sd'], sd{psr});
        h5create(h5_filename,['/',grpname,filesep,'yr'],length(yr{psr}));
        h5write(h5_filename,['/',grpname,filesep,'yr'], yr{psr});

    end
end

h5create(h5_filename,'/Np',1);
h5write(h5_filename,'/Np', Np);

%% Plots
close all;
figure;
hold on
plot(timeVec,dataVec,'o');
plot(mrgTimeVec, mrgDataVec,'+');
legend('PTA Data','Block-averaged');
axis tight;

figure;
hold on;
plot(timeVec,dataVec,'o');
plot(mrgTimeVec, mrgDataVec,'+');
plot(intrpTimeVec,intrpData,'LineWidth',2.0);
legend('PTA Data','Block-averaged','Block-averaged Interpolated');
axis tight;

figure;
hold on;
plot(timeVec,dataVec,'o');
plot(intrpTimeVec, trndEst,'LineWidth',2.0);
plot(timeVec, resOfres,'.','MarkerSize',4.0);
legend('PTA Data','SHAPES estimate','Residual');
axis tight;




